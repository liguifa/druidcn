(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{179:function(r,a,e){"use strict";e.r(a);var i=e(0),t=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var r=this,a=r.$createElement,e=r._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集群","aria-hidden":"true"}},[r._v("#")]),r._v(" 集群")]),r._v(" "),e("p",[r._v("Druid被设计成可扩展、高容错的集群。\n在本文档中，我们将搭建一个简单的集群，并讨论如何进一步配置以满足您的需求。 这个简单的集群将为Historicals和MiddleManagers提供可扩展的容错服务器，以及一个单一的coordination服务器来承载协调器和Overlord进程。在生产中，我们建议部署Coordinator和Overlord也采用多机容错配置。")]),r._v(" "),e("h2",{attrs:{id:"硬件要求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#硬件要求","aria-hidden":"true"}},[r._v("#")]),r._v(" 硬件要求")]),r._v(" "),e("p",[r._v("Coordinator和Overlord进程可以共同部署在同一台服务器上，该服务器负责处理集群的元数据和协调需求。硬件要求如下：")]),r._v(" "),e("ul",[e("li",[r._v("4核CPU")]),r._v(" "),e("li",[r._v("15GB内存")]),r._v(" "),e("li",[r._v("80GB SSD存储")])]),r._v(" "),e("p",[r._v("Historicals和MiddleManagers可以共同部署在同一台服务器上，该服务器负责处理集群中的实际数据。主要需要CPU、内存和硬盘，硬件要求如下：")]),r._v(" "),e("ul",[e("li",[r._v("8核CPU")]),r._v(" "),e("li",[r._v("61GB内存")]),r._v(" "),e("li",[r._v("160GB SSD存储")])]),r._v(" "),e("p",[r._v("Druid Brokers接受查询请求并将请求发送到集群的其余部分。它们还可选地保存查询的高速缓存。主要需要CPU和内存。")]),r._v(" "),e("ul",[e("li",[r._v("8核CPU")]),r._v(" "),e("li",[r._v("61GB内存")]),r._v(" "),e("li",[r._v("160GB SSD存储")])]),r._v(" "),e("p",[r._v("您可以考虑在Broker服务器上运行Druid相关开源UI程序或者查询库。\n更大的集群就需要更好配置的服务器。")]),r._v(" "),e("h2",{attrs:{id:"操作系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作系统","aria-hidden":"true"}},[r._v("#")]),r._v(" 操作系统")]),r._v(" "),e("p",[r._v("最好Linux，java版本1.7及其以上")]),r._v(" "),e("h2",{attrs:{id:"下载集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载集群","aria-hidden":"true"}},[r._v("#")]),r._v(" 下载集群")]),r._v(" "),e("p",[r._v("首先，下载和解压最新的Druid包。最好是在单个机器上操作，因为可以修改完配置文件后分发复制到所有机器。")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("curl -O http://static.druid.io/artifacts/releases/druid-0.9.2-bin.tar.gz\ntar -xzf druid-0.9.2-bin.tar.gz\ncd druid-0.9.2\n")])])]),e("p",[r._v("在druid包下，有以下内容：")]),r._v(" "),e("ul",[e("li",[r._v("LICENSE - license文件")]),r._v(" "),e("li",[r._v("bin/ - 对此quickstart有用的脚本")]),r._v(" "),e("li",[r._v("conf/ - 集群设置的配置模板")]),r._v(" "),e("li",[r._v("conf-quickstart/ - 此quickstart的配置")]),r._v(" "),e("li",[r._v("extensions/ - Druid的所有扩展")]),r._v(" "),e("li",[r._v("haddop-dependencies/ - Druid haddop的依赖")]),r._v(" "),e("li",[r._v("lib/ - 所有Druid核心包含的包")]),r._v(" "),e("li",[r._v("quickstart/ - 对此quickstart有用的文件")])]),r._v(" "),e("p",[r._v("需要修改conf文件夹下的配置文件")]),r._v(" "),e("h2",{attrs:{id:"配置deep-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置deep-storage","aria-hidden":"true"}},[r._v("#")]),r._v(" 配置deep storage")]),r._v(" "),e("p",[r._v("Druid用分布式文件系统或大对象（blob）存储来进行数据存储。最常用的是亚马逊S3和HDFS。")]),r._v(" "),e("h3",{attrs:{id:"s3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#s3","aria-hidden":"true"}},[r._v("#")]),r._v(" S3")]),r._v(" "),e("p",[r._v('在conf/druid/_common/common.runtime.properties配置文件中，将设置druid.extensions.loadList=["druid-s3-extensions"]，然后注释掉本地存储相关配置，放开S3配置。')]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v('druid.extensions.loadList=["druid-s3-extensions"]\n\n#druid.storage.type=local\n#druid.storage.storageDirectory=var/druid/segments\n\ndruid.storage.type=s3\ndruid.storage.bucket=your-bucket\ndruid.storage.baseKey=druid/segments\ndruid.s3.accessKey=...\ndruid.s3.secretKey=...\n\n#druid.indexer.logs.type=file\n#druid.indexer.logs.directory=var/druid/indexing-logs\n\ndruid.indexer.logs.type=s3\ndruid.indexer.logs.s3Bucket=your-bucket\ndruid.indexer.logs.s3Prefix=druid/indexing-logs\n')])])]),e("h3",{attrs:{id:"hdfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hdfs","aria-hidden":"true"}},[r._v("#")]),r._v(" HDFS")]),r._v(" "),e("p",[r._v('在conf/druid/_common/common.runtime.properties配置文件中，将设置druid.extensions.loadList=["io.druid.extensions:druid-hdfs-storage"]，然后注释掉本地存储相关配置，放开HDFS配置。')]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v('druid.extensions.loadList=["druid-hdfs-storage"]\n\n#druid.storage.type=local\n#druid.storage.storageDirectory=var/druid/segments\n\ndruid.storage.type=hdfs\ndruid.storage.storageDirectory=/druid/segments\n\n#druid.indexer.logs.type=file\n#druid.indexer.logs.directory=var/druid/indexing-logs\n\ndruid.indexer.logs.type=hdfs\ndruid.indexer.logs.directory=/druid/indexing-logs\n')])])]),e("p",[r._v("将Hadoop配置XML文件（core-site.xml，hdfs-site.xml，yarn-site.xml，mapred-site.xml）放在Druid节点的classpath上。你可以通过将它们复制到conf/druid/_common/中来实现。")]),r._v(" "),e("h2",{attrs:{id:"配置tranquility服务器-可选"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置tranquility服务器-可选","aria-hidden":"true"}},[r._v("#")]),r._v(" 配置Tranquility服务器 (可选)")]),r._v(" "),e("p",[r._v("通过Tranquility服务器的http接口能够将数据流发送到Druid。如果想使用这种方法就需要配置Tranquility服务器。")]),r._v(" "),e("h2",{attrs:{id:"配置tranquility-kafka-可选"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置tranquility-kafka-可选","aria-hidden":"true"}},[r._v("#")]),r._v(" 配置Tranquility Kafka (可选)")]),r._v(" "),e("p",[r._v("Druid能够通过Tranquility Kafka从kafka消费获取数据流。如果想使用这种方法就需要配置Tranquility kafka。")]),r._v(" "),e("h2",{attrs:{id:"配置hadoop-可选"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置hadoop-可选","aria-hidden":"true"}},[r._v("#")]),r._v(" 配置Hadoop (可选)")]),r._v(" "),e("p",[r._v("如果需要通过hadoop集群加载数据，在Druid集群中需要如下配置：\n更新conf/middleManager/runtime.properties中的druid.indexer.task.hadoopWorkingPath参数，将索引过程中需要的临时文件指向HDFS路径。\n通常会配置成druid.indexer.task.hadoopWorkingPath=/tmp/druid-indexing\n将hadoop的xml(core-site.xml, hdfs-site.xml, yarn-site.xml, mapred-site.xml)配置文件放到Druid节点的classpath路径里，可以copy到conf/druid/_common/core-site.xml, conf/druid/_common/hdfs-site.xml等等。\n请注意，您不需要为了从Hadoop加载数据而使用HDFS深存储。例如，如果您的集群在Amazon Web Services上运行，我们建议使用S3进行深度存储，即使您正在使用Hadoop或Elastic MapReduce加载数据。")]),r._v(" "),e("h2",{attrs:{id:"配置druid-coordination"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置druid-coordination","aria-hidden":"true"}},[r._v("#")]),r._v(" 配置Druid coordination")]),r._v(" "),e("p",[r._v("在这个简单的集群示例中，可以在同一台服务器上，部署单个Druid Coordinator、Druid Overlord、一个ZooKeeper实例和一个嵌入式Derby元数据数据库。\n修改conf/druid/_common/common.runtime.properties配置文件中druid.zk.service.host参数，指向zookeeper服务器地址。修改druid.metadata.storage.connector.connectURI和druid.metadata.storage.connector.host参数执行元数据存储地址。")]),r._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[r._v("提示")]),r._v(" "),e("p",[r._v("生产上建议运行两个服务器，每个服务器运行一个Druid Coordinator和一个Druid Overlord。同时将ZooKeeper运行在一个独立的环境，元数据存储也用MySQL或者PostgreSQL运行在独立环境上。")])]),r._v(" "),e("h2",{attrs:{id:"调整服务查询druid进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调整服务查询druid进程","aria-hidden":"true"}},[r._v("#")]),r._v(" 调整服务查询Druid进程")]),r._v(" "),e("p",[r._v("Druid Historicals和MiddleManagers节点可以通过以下参数分配调整硬件资源：")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("-Xmx and -Xms\ndruid.server.http.numThreads\ndruid.processing.buffer.sizeBytes\ndruid.processing.numThreads\ndruid.query.groupBy.maxIntermediateRows\ndruid.query.groupBy.maxResults\ndruid.server.maxSize and druid.segmentCache.locations on Historical Nodes\ndruid.worker.capacity on MiddleManagers\n")])])]),e("p",[r._v("保证 -XX:MaxDirectMemory >= numThreads*sizeBytes, 否则Druid会启动失败。\n有关配置选项的详细说明请参考configuration documentation 。")]),r._v(" "),e("h2",{attrs:{id:"调整druid-brokers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调整druid-brokers","aria-hidden":"true"}},[r._v("#")]),r._v(" 调整Druid Brokers")]),r._v(" "),e("p",[r._v("Druid Brokers的主要配置如下:")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("-Xmx and -Xms\ndruid.server.http.numThreads\ndruid.cache.sizeInBytes\ndruid.processing.buffer.sizeBytes\ndruid.processing.numThreads\ndruid.query.groupBy.maxIntermediateRows\ndruid.query.groupBy.maxResults\n")])])]),e("p",[r._v("保证 -XX:MaxDirectMemory >= numThreads*sizeBytes, 否则Druid会启动失败。\n有关配置选项的详细说明请参考configuration documentation 。")]),r._v(" "),e("h2",{attrs:{id:"端口开通"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#端口开通","aria-hidden":"true"}},[r._v("#")]),r._v(" 端口开通")]),r._v(" "),e("ul",[e("li",[r._v("1527 (Derby on your Coordinator; not needed if you are using a separate metadata store like MySQL or PostgreSQL)")]),r._v(" "),e("li",[r._v("2181 (ZooKeeper; not needed if you are using a separate ZooKeeper cluster)")]),r._v(" "),e("li",[r._v("8081 (Coordinator)")]),r._v(" "),e("li",[r._v("8082 (Broker)")]),r._v(" "),e("li",[r._v("8083 (Historical)")]),r._v(" "),e("li",[r._v("8084 (Standalone Realtime, if used)")]),r._v(" "),e("li",[r._v("8088 (Router, if used)")]),r._v(" "),e("li",[r._v("8090 (Overlord)")]),r._v(" "),e("li",[r._v("8091, 8100–8199 (Druid Middle Manager; you may need higher than port 8199 if you have a very high druid.worker.capacity)")]),r._v(" "),e("li",[r._v("8200 (Tranquility Server, if used)")])]),r._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[r._v("提示")]),r._v(" "),e("p",[r._v("在生产上，建议将ZooKeeper和元数据存储独立部署，不要和Coordinator部署在同一个服务器上。")])]),r._v(" "),e("h2",{attrs:{id:"启动coordinator-overlord-zookeeper-metadata-store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动coordinator-overlord-zookeeper-metadata-store","aria-hidden":"true"}},[r._v("#")]),r._v(" 启动Coordinator, Overlord, Zookeeper,  metadata store")]),r._v(" "),e("p",[r._v("将配置好的配置copy到协调服务器，如果本机已经配置好了也可以通过rsync来进行同步copy：")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("rsync -az druid-0.9.2/ COORDINATION_SERVER:druid-0.9.2/\n")])])]),e("p",[r._v("安装Zookeeper:")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("curl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz\ntar -xzf zookeeper-3.4.6.tar.gz\ncd zookeeper-3.4.6\ncp conf/zoo_sample.cfg conf/zoo.cfg\n./bin/zkServer.sh start\n")])])]),e("p",[r._v("在协调服务器上，cd进入Druid根目录，并启动协调服务（可以在不同的窗口执行或者将日志输出到文件中）。")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("java `cat conf/druid/coordinator/jvm.config | xargs` -cp conf/druid/_common:conf/druid/coordinator:lib/* io.druid.cli.Main server coordinator\njava `cat conf/druid/overlord/jvm.config | xargs` -cp conf/druid/_common:conf/druid/overlord:lib/* io.druid.cli.Main server overlord\n")])])]),e("p",[r._v("每一个服务启动后应该都有log信息输出，在var/log/druid目录可以查看更详细的日志信息。")]),r._v(" "),e("h2",{attrs:{id:"启动historicals和middlemanagers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动historicals和middlemanagers","aria-hidden":"true"}},[r._v("#")]),r._v(" 启动Historicals和MiddleManagers")]),r._v(" "),e("p",[r._v("将配置好的Druid连同配置全目录拷贝到Druid Historicals和MiddleManagers服务器上。\n登录服务器进入Druid根目录，执行以下指令：")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("java `cat conf/druid/historical/jvm.config | xargs` -cp conf/druid/_common:conf/druid/historical:lib/* io.druid.cli.Main server historical\njava `cat conf/druid/middleManager/jvm.config | xargs` -cp conf/druid/_common:conf/druid/middleManager:lib/* io.druid.cli.Main server middleManager\n")])])]),e("p",[r._v("按照需要也可以添加更多的Historicals和MiddleManagers节点。")]),r._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[r._v("提示")]),r._v(" "),e("p",[r._v("For clusters with complex resource allocation needs, you can break apart Historicals and MiddleManagers and scale the components individually. This also allows you take advantage of Druid's built-in MiddleManager autoscaling facility.")])]),r._v(" "),e("p",[r._v("如果您正在使用Kafka或通过HTTP进行基于推送的数据流加载，则还可以在MiddleManagers和Historicals的同一服务器上启动Tranquility Server。 对于大规模生产环境，MiddleManagers和Tranquility仍然可以位于同一服务器。 如果您使用流处理器运行Tranquility（而不是服务器），则可以将Tranquility与流处理器共存，而不需要单独的Tranquility服务器。")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("curl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz\ntar -xzf tranquility-distribution-0.8.0.tgz\ncd tranquility-distribution-0.8.0\nbin/tranquility <server or kafka> -configFile <path_to_druid_distro>/conf/tranquility/<server or kafka>.json\n")])])]),e("h2",{attrs:{id:"启动druid-broker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动druid-broker","aria-hidden":"true"}},[r._v("#")]),r._v(" 启动Druid Broker")]),r._v(" "),e("p",[r._v("进入Druid目录，执行以下指令启动Druid Broker:")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("java `cat conf/druid/broker/jvm.config | xargs` -cp conf/druid/_common:conf/druid/broker:lib/* io.druid.cli.Main server broker\n")])])]),e("p",[r._v("根据查询负载也可以添加更多的Brokers。")])])}],!1,null,null,null);t.options.__file="集群.md";a.default=t.exports}}]);