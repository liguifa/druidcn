(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{175:function(e,n,t){"use strict";t.r(n);var a=t(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"从流数据加载数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从流数据加载数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 从流数据加载数据")]),e._v(" "),t("h2",{attrs:{id:"入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#入门","aria-hidden":"true"}},[e._v("#")]),e._v(" 入门")]),e._v(" "),t("p",[e._v("本教程介绍如何将自己的流数据加载到Druid。\n在本教程中，我们假设您已经按照快速入门中所述下载了Druid和Tranquility，并将其在本机上运行。并且您不需要事先加载任何数据。\n完成后，您可以通过编写自定义数据提取规范来加载自己的数据集。")]),e._v(" "),t("h2",{attrs:{id:"编写数据提取规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写数据提取规范","aria-hidden":"true"}},[e._v("#")]),e._v(" 编写数据提取规范")]),e._v(" "),t("p",[e._v("当使用流进行数据加载，推荐使用Stream Push方式。在本教程中使用Tranquility 通过HTTP将数据推送到Druid。\n")]),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("p",[e._v("本教程将介绍如何通过HTTP将数据流推送到Druid，但Druid还支持各类批处理和流式加载方法。查看Loading files 和 Loading streams页面来了解其它方法的更多消息，包括Hadoop、Kafka, Storm、Samza、Spark Streaming和您自己的JVM应用。")])]),e._v("\n你可以按照需求修改conf-quickstart/tranquility/server.json配置文件，来自定义Tranquility Server配置，通过HTTP加载新的数据集。\n配置文件中有几项需要特别关注："),t("p"),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "dataSources" : {\n    "metrics" : {\n      "spec" : {\n        "dataSchema" : {\n          //1.使用的数据集\n          "dataSource" : "metrics",\n          "parser" : {\n            "type" : "string",\n            "parseSpec" : {\n              //2.哪个字段是timestamp\n              "timestampSpec" : {\n                "column" : "timestamp",\n                "format" : "auto"\n              },\n              "dimensionsSpec" : {\n                //3.哪些字段需要当成维度处理\n                "dimensions" : [],\n                "dimensionExclusions" : [\n                  "timestamp",\n                  "value"\n                ]\n              },\n              "format" : "json"\n            }\n          },\n          "granularitySpec" : {\n            "type" : "uniform",\n            "segmentGranularity" : "hour",\n            "queryGranularity" : "none"\n          },\n          //4.哪些字段需要当成度量进行处理\n          "metricsSpec" : [\n            {\n              "type" : "count",\n              "name" : "count"\n            },\n            {\n              "name" : "value_sum",\n              "type" : "doubleSum",\n              "fieldName" : "value"\n            },\n            {\n              "fieldName" : "value",\n              "name" : "value_min",\n              "type" : "doubleMin"\n            },\n            {\n              "type" : "doubleMax",\n              "name" : "value_max",\n              "fieldName" : "value"\n            }\n          ]\n        },\n        "ioConfig" : {\n          "type" : "realtime"\n        },\n        "tuningConfig" : {\n          "type" : "realtime",\n          "maxRowsInMemory" : "100000",\n          "intermediatePersistPeriod" : "PT10M",\n          "windowPeriod" : "PT10M"\n        }\n      },\n      "properties" : {\n        "task.partitions" : "1",\n        "task.replicants" : "1"\n      }\n    }\n  },\n  "properties" : {\n    "zookeeper.connect" : "localhost",\n    "druid.discovery.curator.path" : "/druid/discovery",\n    "druid.selectors.indexing.serviceName" : "druid/overlord",\n    "http.port" : "8200",\n    "http.threads" : "8"\n  }\n}\n')])])]),t("p",[e._v("下面用一个pageviews(浏览量)的json作为示例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{"time": "2000-01-01T00:00:00Z", "url": "/foo/bar", "user": "alice", "latencyMs": 32}\n')])])]),t("p",[e._v("所以对于这个例子上述四个问题的答案是：")]),e._v(" "),t("ul",[t("li",[e._v("数据集就是pageviews")]),e._v(" "),t("li",[e._v("time字段是timestamp")]),e._v(" "),t("li",[e._v("可以用url和user作为维度\n度量可以是计算pageviews计数，和latencyMs字段求和。在数据接收阶段求和，也能在查询的时候快速方便的求平均值。")])]),e._v(" "),t("p",[e._v("所以配置文件修改后")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "dataSources" : {\n    "metrics" : {\n      "spec" : {\n        "dataSchema" : {\n          //1.使用的数据集\n          "dataSource" : "pageviews",\n          "parser" : {\n            "type" : "string",\n            "parseSpec" : {\n              //2.哪个字段是timestamp\n              "timestampSpec" : {\n                "column" : "time",\n                "format" : "auto"\n              },\n              "dimensionsSpec" : {\n                //3.哪些字段需要当成维度处理\n                "dimensions" : ["url", "user"],\n                "dimensionExclusions" : [\n                  "timestamp",\n                  "value"\n                ]\n              },\n              "format" : "json"\n            }\n          },\n          "granularitySpec" : {\n            "type" : "uniform",\n            "segmentGranularity" : "hour",\n            "queryGranularity" : "none"\n          },\n          //4.哪些字段需要当成度量进行处理\n          "metricsSpec" : [\n            {\n              "name": "views",\n              "type": "count"\n            },\n            {\n              "name": "latencyMs", \n              "type": "doubleSum", \n              "fieldName": "latencyMs"\n            }\n          ]\n        },\n        "ioConfig" : {\n          "type" : "realtime"\n        },\n        "tuningConfig" : {\n          "type" : "realtime",\n          "maxRowsInMemory" : "100000",\n          "intermediatePersistPeriod" : "PT10M",\n          "windowPeriod" : "PT10M"\n        }\n      },\n      "properties" : {\n        "task.partitions" : "1",\n        "task.replicants" : "1"\n      }\n    }\n  },\n  "properties" : {\n    "zookeeper.connect" : "localhost",\n    "druid.discovery.curator.path" : "/druid/discovery",\n    "druid.selectors.indexing.serviceName" : "druid/overlord",\n    "http.port" : "8200",\n    "http.threads" : "8"\n  }\n}\n')])])]),t("h2",{attrs:{id:"重启服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重启服务","aria-hidden":"true"}},[e._v("#")]),e._v(" 重启服务")]),e._v(" "),t("p",[e._v("停止Tranquility（CTRL-C）并重新启动，来获取新的配置文件并生效。")]),e._v(" "),t("h2",{attrs:{id:"发送数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 发送数据")]),e._v(" "),t("p",[e._v("发送测试数据如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{"time": "2000-01-01T00:00:00Z", "url": "/foo/bar", "user": "alice", "latencyMs": 32}\n{"time": "2000-01-01T00:00:00Z", "url": "/", "user": "bob", "latencyMs": 11}\n{"time": "2000-01-01T00:00:00Z", "url": "/foo/bar", "user": "bob", "latencyMs": 45}\n')])])]),t("p",[e._v("Druid流处理需要相对当前（准实时）的数据，相而言windowPeriod值控制的是更宽松的时间窗口（也就是流处理会检查数据timestamp的值，而时间窗口只关注数据接收的时间）。所以需要将2000-01-01T00:00:00Z转换为ISO8601格式的当前系统时间，你可以用以下命令转换：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("python -c 'import datetime; print(datetime.datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%SZ\"))'\n")])])]),t("p",[e._v("用输出的时间将上述的json示例的timestamps更新，并且保存到pageviews.json文件里。 通过下面命令将数据发送到Druid：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("curl -XPOST -H'Content-Type: application/json' --data-binary @pageviews.json http://localhost:8200/v1/post/pageviews\n")])])]),t("p",[e._v("然后你会看到屏幕输出如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{"result":{"received":3,"sent":3}}\n')])])]),t("p",[e._v('这表明HTTP服务接收了三条事件，并且发送了三条到Druid。因为需要分配Druid给ingestion 任务，所以初次运行可能会消耗几秒钟时间。但是后续查询请求就会变得很快了。\n如果你看到是"sent":0，很有可能是时间戳（timestamps）不够新，再次更新时间戳并且重新发送。')]),e._v(" "),t("h2",{attrs:{id:"数据查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据查询","aria-hidden":"true"}},[e._v("#")]),e._v(" 数据查询")]),e._v(" "),t("p",[e._v("数据发送后就可以马上进行数据查询了")])])}],!1,null,null,null);s.options.__file="从流数据加载数据.md";n.default=s.exports}}]);